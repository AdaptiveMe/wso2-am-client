/*
 * WSO2 API Manager - Admin
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: 0.11.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.admin;

import io.swagger.client.ApiException;
import io.swagger.client.api.admin.SubscriptionPoliciesApi;
import io.swagger.client.model.admin.SubscriptionThrottlePolicy;
import io.swagger.client.model.admin.SubscriptionThrottlePolicyList;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for SubscriptionPoliciesApi
 */
@Ignore
public class SubscriptionPoliciesApiTest {

    private final SubscriptionPoliciesApi api = new SubscriptionPoliciesApi();

    
    /**
     * Get all Subscription level throttle policies
     *
     * Get all Subscription level throttle policies 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesSubscriptionGetTest() throws ApiException {
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        SubscriptionThrottlePolicyList response = api.throttlingPoliciesSubscriptionGet(accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Delete a Subscription level throttle policy
     *
     * Delete a Subscription level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesSubscriptionPolicyIdDeleteTest() throws ApiException {
        String policyId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.throttlingPoliciesSubscriptionPolicyIdDelete(policyId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Subscription Policy
     *
     * Retrieve a Subscription Policy providing the policy name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesSubscriptionPolicyIdGetTest() throws ApiException {
        String policyId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        SubscriptionThrottlePolicy response = api.throttlingPoliciesSubscriptionPolicyIdGet(policyId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Update a Subscription level throttle policy
     *
     * Update a Subscription level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesSubscriptionPolicyIdPutTest() throws ApiException {
        String policyId = null;
        SubscriptionThrottlePolicy body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        SubscriptionThrottlePolicy response = api.throttlingPoliciesSubscriptionPolicyIdPut(policyId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Add a Subscription level throttle policy
     *
     * Add a Subscription level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesSubscriptionPostTest() throws ApiException {
        SubscriptionThrottlePolicy body = null;
        String contentType = null;
        SubscriptionThrottlePolicy response = api.throttlingPoliciesSubscriptionPost(body, contentType);

        // TODO: test validations
    }
    
}
