/*
 * WSO2 API Manager - Admin
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: 0.11.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.admin;

import io.swagger.client.ApiException;
import io.swagger.client.api.admin.ApplicationPoliciesApi;
import io.swagger.client.model.admin.ApplicationThrottlePolicy;
import io.swagger.client.model.admin.ApplicationThrottlePolicyList;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for ApplicationPoliciesApi
 */
@Ignore
public class ApplicationPoliciesApiTest {

    private final ApplicationPoliciesApi api = new ApplicationPoliciesApi();

    
    /**
     * Get all Application level throttle policies
     *
     * Get all Application level throttle policies 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesApplicationGetTest() throws ApiException {
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        ApplicationThrottlePolicyList response = api.throttlingPoliciesApplicationGet(accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Delete an Application level throttle policy
     *
     * Delete an Application level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesApplicationPolicyIdDeleteTest() throws ApiException {
        String policyId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.throttlingPoliciesApplicationPolicyIdDelete(policyId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Retrieve an Application Policy
     *
     * Retrieve an Application Policy providing the policy name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesApplicationPolicyIdGetTest() throws ApiException {
        String policyId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        ApplicationThrottlePolicy response = api.throttlingPoliciesApplicationPolicyIdGet(policyId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Update an Application level throttle policy
     *
     * Update an Application level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesApplicationPolicyIdPutTest() throws ApiException {
        String policyId = null;
        ApplicationThrottlePolicy body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        ApplicationThrottlePolicy response = api.throttlingPoliciesApplicationPolicyIdPut(policyId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Add an Application level throttle policy
     *
     * Add an Application level throttle policy 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingPoliciesApplicationPostTest() throws ApiException {
        ApplicationThrottlePolicy body = null;
        String contentType = null;
        ApplicationThrottlePolicy response = api.throttlingPoliciesApplicationPost(body, contentType);

        // TODO: test validations
    }
    
}
