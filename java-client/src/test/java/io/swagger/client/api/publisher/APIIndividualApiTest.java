/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.11.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.publisher;

import io.swagger.client.ApiException;
import io.swagger.client.model.publisher.API;

import java.io.File;
import io.swagger.client.model.publisher.FileInfo;
import io.swagger.client.model.publisher.Mediation;
import io.swagger.client.model.publisher.MediationList;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for APIIndividualApi
 */
@Ignore
public class APIIndividualApiTest {

    private final APIIndividualApi api = new APIIndividualApi();

    
    /**
     * Delete an API
     *
     * This operation can be used to delete an existing API proving the Id of the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdDeleteTest() throws ApiException {
        String apiId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdDelete(apiId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get details of an API
     *
     * Using this operation, you can retrieve complete details of a single API. You need to provide the Id of the API to retrive it. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdGetTest() throws ApiException {
        String apiId = null;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        API response = api.apisApiIdGet(apiId, accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Retrieve/Search APIs 
     *
     * This operation provides you a list of available APIs qualifying under a given search condition.  Each retrieved API is represented with a minimal amount of attributes. If you want to get complete details of an API, you need to use **Get details of an API** operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPoliciesMediationGetTest() throws ApiException {
        String apiId = null;
        Integer limit = null;
        Integer offset = null;
        String query = null;
        String accept = null;
        String ifNoneMatch = null;
        MediationList response = api.apisApiIdPoliciesMediationGet(apiId, limit, offset, query, accept, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Delete an API
     *
     * This operation can be used to delete an existing API proving the Id of the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPoliciesMediationMediationPolicyIdDeleteTest() throws ApiException {
        String apiId = null;
        String mediationPolicyId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdPoliciesMediationMediationPolicyIdDelete(apiId, mediationPolicyId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get a global mediation squence
     *
     * This operation can be used to retrieve a particular global mediation policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPoliciesMediationMediationPolicyIdGetTest() throws ApiException {
        String apiId = null;
        String mediationPolicyId = null;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Mediation response = api.apisApiIdPoliciesMediationMediationPolicyIdGet(apiId, mediationPolicyId, accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Update an mediation policy
     *
     * This operation can be used to update an existing API. But the properties &#x60;name&#x60;, &#x60;version&#x60;, &#x60;context&#x60;, &#x60;provider&#x60;, &#x60;state&#x60; will not be changed by this operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPoliciesMediationMediationPolicyIdPutTest() throws ApiException {
        String apiId = null;
        String mediationPolicyId = null;
        Mediation body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        Mediation response = api.apisApiIdPoliciesMediationMediationPolicyIdPut(apiId, mediationPolicyId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Upload a global mediation policy
     *
     * This operation can be used to upload a global mediatoin policy to the registry. The file to be uploaded should be given as a form data parameter &#x60;file&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPoliciesMediationPostTest() throws ApiException {
        Mediation body = null;
        String apiId = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        Mediation response = api.apisApiIdPoliciesMediationPost(body, apiId, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Update an API
     *
     * This operation can be used to update an existing API. But the properties &#x60;name&#x60;, &#x60;version&#x60;, &#x60;context&#x60;, &#x60;provider&#x60;, &#x60;state&#x60; will not be changed by this operation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdPutTest() throws ApiException {
        String apiId = null;
        API body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        API response = api.apisApiIdPut(apiId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get swagger definition
     *
     * This operation can be used to retrieve the swagger definition of an API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerGetTest() throws ApiException {
        String apiId = null;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdSwaggerGet(apiId, accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Update swagger definition
     *
     * This operation can be used to update the swagger definition of an existing API. Swagger definition to be updated is passed as a form data parameter &#x60;apiDefinition&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerPutTest() throws ApiException {
        String apiId = null;
        String apiDefinition = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisApiIdSwaggerPut(apiId, apiDefinition, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get thumbnail image
     *
     * This operation can be used to download a thumbnail image of an API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdThumbnailGetTest() throws ApiException {
        String apiId = null;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdThumbnailGet(apiId, accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Upload a thumbnail image
     *
     * This operation can be used to upload a thumbnail image of an API. The thumbnail to be uploaded should be given as a form data parameter &#x60;file&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisApiIdThumbnailPostTest() throws ApiException {
        String apiId = null;
        File file = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        FileInfo response = api.apisApiIdThumbnailPost(apiId, file, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Change API Status
     *
     * This operation is used to change the lifecycle of an API. Eg: Publish an API which is in &#x60;CREATED&#x60; state. In order to change the lifecycle, we need to provide the lifecycle &#x60;action&#x60; as a query parameter.  For example, to Publish an API, &#x60;action&#x60; should be &#x60;Publish&#x60;.  Some actions supports providing additional paramters which should be provided as &#x60;lifecycleChecklist&#x60; parameter. Please see parameters table for more information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisChangeLifecyclePostTest() throws ApiException {
        String action = null;
        String apiId = null;
        String lifecycleChecklist = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.apisChangeLifecyclePost(action, apiId, lifecycleChecklist, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Create a new API version
     *
     * This operation can be used to create a new version of an existing API. The new version is specified as &#x60;newVersion&#x60; query parameter. New API will be in &#x60;CREATED&#x60; state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apisCopyApiPostTest() throws ApiException {
        String newVersion = null;
        String apiId = null;
        api.apisCopyApiPost(newVersion, apiId);

        // TODO: test validations
    }
    
}
