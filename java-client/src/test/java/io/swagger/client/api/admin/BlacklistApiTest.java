/*
 * WSO2 API Manager - Admin
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: 0.11.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api.admin;

import io.swagger.client.ApiException;
import io.swagger.client.api.admin.BlacklistApi;
import io.swagger.client.model.admin.BlockingCondition;
import io.swagger.client.model.admin.BlockingConditionList;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for BlacklistApi
 */
@Ignore
public class BlacklistApiTest {

    private final BlacklistApi api = new BlacklistApi();

    
    /**
     * Delete a Blocking condition
     *
     * Delete a Blocking condition 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingBlacklistConditionIdDeleteTest() throws ApiException {
        String conditionId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.throttlingBlacklistConditionIdDelete(conditionId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Blocking Condition
     *
     * Retrieve a Blocking Condition providing the condition Id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingBlacklistConditionIdGetTest() throws ApiException {
        String conditionId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        BlockingCondition response = api.throttlingBlacklistConditionIdGet(conditionId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get all blocking condtions
     *
     * Get all blocking condtions 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingBlacklistGetTest() throws ApiException {
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        BlockingConditionList response = api.throttlingBlacklistGet(accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Add a Blocking condition
     *
     * Add a Blocking condition 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void throttlingBlacklistPostTest() throws ApiException {
        BlockingCondition body = null;
        String contentType = null;
        BlockingCondition response = api.throttlingBlacklistPost(body, contentType);

        // TODO: test validations
    }
    
}
